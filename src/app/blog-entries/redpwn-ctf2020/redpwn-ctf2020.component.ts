import { Component, OnInit, AfterViewChecked } from '@angular/core';
import { HighlightService } from '../highlight.service';
import { faDownload } from '@fortawesome/free-solid-svg-icons';
import { ThemeService } from 'src/app/services/theme.service';
import { Observable } from 'rxjs';

export interface Challenge {
    challengeName: string;
    category: string;
}

@Component({
    selector: 'app-redpwn-ctf2020',
    templateUrl: './redpwn-ctf2020.component.html',
    styleUrls: ['./redpwn-ctf2020.component.scss']
})
export class RedpwnCTF2020Component implements OnInit, AfterViewChecked {
    constructor(private highlightService: HighlightService, private themeService: ThemeService) {}

    isDarkTheme: Observable<boolean>;

    faDownload = faDownload;
    datasource: Challenge[] = [
        { challengeName: '12-shades-of-redpwn', category: 'crypto' },
        { challengeName: '4k-rsa', category: 'crypto' },
        { challengeName: 'alien-transmissions-v2', category: 'crypto' },
        { challengeName: 'base646464', category: 'crypto' },
        { challengeName: 'itsy-bitsy', category: 'crypto' },
        { challengeName: 'primimity', category: 'crypto' },
        { challengeName: 'pseudo-key', category: 'crypto' },
        { challengeName: 'inspector-general', category: 'web' },
        { challengeName: 'bubbly', category: 'rev' },
        { challengeName: 'uglybash', category: 'misc' },
        { challengeName: 'coffer-overflow-2', category: 'pwn' }
    ];

    private highlighted = false;
    highlight = {
        0: {
            0: `<pre><code class="language-typescript">8,6 9,0 8,1 8,7 10,3 4,9 9,9 4,3 9,7 9,7 4,1 9,2 4,9 7,11 4,1 9,7 7,11 4,4 9,2 7,11 4,4 9,6 9,8 10,5</code></pre>`,
            1: `<pre><code class="language-python">colors = "8,6 9,0 8,1 8,7 10,3 4,9 9,9 4,3 9,7 9,7 4,1 9,2 4,9 7,11 4,1 9,7 7,11 4,4 9,2 7,11 4,4 9,6 9,8 10,5"\n\nlist = []\nfor i in colors.split():\n    list.append([int(j) for j in i.split(",")])\na = ""\nfor i in list:\n    a += chr(i[0]*12 + i[1])\nprint(a)</code></pre>`
        },
        1: {
            0: `<pre><code class="language-python">f = "9 353689 450544 968301 × 9 431486 459129 385713 × 9 563871 376496 945939 × 9 734621 099746 950389 × 9 736426 554597 289187 × 10 035211 751896 066517 × 10 040518 276351 167659 × 10 181432 127731 860643 × 10 207091 564737 615283 × 10 435329 529687 076341 × 10 498390 163702 844413 × 10 795203 922067 072869 × 11 172074 163972 443279 × 11 177660 664692 929397 × 11 485099 149552 071347 × 11 616532 426455 948319 × 11 964233 629849 590781 × 11 992188 644420 662609 × 12 084363 952563 914161 × 12 264277 362666 379411 × 12 284357 139600 907033 × 12 726850 839407 946047 × 13 115347 801685 269351 × 13 330028 326583 914849 × 13 447718 068162 387333 × 13 554661 643603 143669 × 13 558122 110214 876367 × 13 579057 804448 354623 × 13 716062 103239 551021 × 13 789440 402687 036193 × 13 856162 412093 479449 × 13 857614 679626 144761 × 14 296909 550165 083981 × 14 302754 311314 161101 × 14 636284 106789 671351 × 14 764546 515788 021591 × 14 893589 315557 698913 × 15 067220 807972 526163 × 15 241351 646164 982941 × 15 407706 505172 751449 × 15 524931 816063 806341 × 15 525253 577632 484267 × 15 549005 882626 828981 × 15 687871 802768 704433 × 15 720375 559558 820789 × 15 734713 257994 215871 × 15 742065 469952 258753 × 15 861836 139507 191959 × 16 136191 597900 016651 × 16 154675 571631 982029 × 16 175693 991682 950929 × 16 418126 406213 832189 × 16 568399 117655 835211 × 16 618761 350345 493811 × 16 663643 217910 267123 × 16 750888 032920 189263 × 16 796967 566363 355967 × 16 842398 522466 619901 × 17 472599 467110 501143 × 17 616950 931512 191043 × 17 825248 785173 311981 × 18 268960 885156 297373 × 18 311624 754015 021467 × 18 415126 952549 973977"\nn = 5028492424316659784848610571868499830635784588253436599431884204425304126574506051458282629520844349077718907065343861952658055912723193332988900049704385076586516440137002407618568563003151764276775720948938528351773075093802636408325577864234115127871390168096496816499360494036227508350983216047669122408034583867561383118909895952974973292619495653073541886055538702432092425858482003930575665792421982301721054750712657799039327522613062264704797422340254020326514065801221180376851065029216809710795296030568379075073865984532498070572310229403940699763425130520414160563102491810814915288755251220179858773367510455580835421154668619370583787024315600566549750956030977653030065606416521363336014610142446739352985652335981500656145027999377047563266566792989553932335258615049158885853966867137798471757467768769820421797075336546511982769835420524203920252434351263053140580327108189404503020910499228438500946012560331269890809392427093030932508389051070445428793625564099729529982492671019322403728879286539821165627370580739998221464217677185178817064155665872550466352067822943073454133105879256544996546945106521271564937390984619840428052621074566596529317714264401833493628083147272364024196348602285804117877\ne = 65537\nc = 3832859959626457027225709485375429656323178255126603075378663780948519393653566439532625900633433079271626752658882846798954519528892785678004898021308530304423348642816494504358742617536632005629162742485616912893249757928177819654147103963601401967984760746606313579479677305115496544265504651189209247851288266375913337224758155404252271964193376588771249685826128994580590505359435624950249807274946356672459398383788496965366601700031989073183091240557732312196619073008044278694422846488276936308964833729880247375177623028647353720525241938501891398515151145843765402243620785039625653437188509517271172952425644502621053148500664229099057389473617140142440892790010206026311228529465208203622927292280981837484316872937109663262395217006401614037278579063175500228717845448302693565927904414274956989419660185597039288048513697701561336476305496225188756278588808894723873597304279725821713301598203214138796642705887647813388102769640891356064278925539661743499697835930523006188666242622981619269625586780392541257657243483709067962183896469871277059132186393541650668579736405549322908665664807483683884964791989381083279779609467287234180135259393984011170607244611693425554675508988981095977187966503676074747171\n\n\nfactors = []\nfor i in f.split(" × "):\n    factors.append(int("".join(i.split())))\n\ndef egcd(a, b):\n    if (a == 0):\n        return [b, 0, 1]\n    else:\n        g, y, x = egcd(b % a, a)\n        return [g, x - (b // a) * y, y]\ndef modInv(a, m):\n    g, x, y = egcd(a, m)\n    if (g != 1):\n        raise Exception("[-]No modular multiplicative inverse of %d under modulus %d" % (a, m))\n    else:\n        return x % m\n\nphy=1\nfor a in factors:\n	phy *= (a-1)\nd = modInv(e, phy)\nm = pow(c, d, n)\nprint(bytes.fromhex(hex(m)[2:])\n</code></pre>`
        },
        2: {
            0: `<pre><code class="language-python">encrypted = open("encrypted.txt", "r")\nencList = []\nfor line in encrypted:\n    encList.append(int(line[:-1]))\n</code></pre>`,
            1: `<pre><code class="language-python">chars = []\nfor i in range(0,399):\n    temp = []\n    for j in range(i, len(encList), 399):\n        if encList[j] > 255:\n            temp.append(encList[j])\n    chars.append(temp)\n</code></pre>`,
            2: `<pre><code class="language-python">countChars = []\nvisited = -1\ntotalLength = len(chars)\nfor i in range(totalLength):\n    length = len(chars[i])\n    fr = [None] * length\n    for j in range(0, length):\n        count = 1\n        if fr[j] == visited:\n            continue\n        for k in range(j+1, length):\n            if chars[i][j] == chars[i][k]:\n                count = count + 1\n                #To avoid counting same element again    \n                fr[k] = visited\n        fr[j] = count\n    countChars.append(fr)\n</code></pre>`,
            3: `<pre><code class="language-python"></code></pre>`
        }
    };

    // <pre><code class="language-"></code></pre>

    scrollToElement(id): void {
        const element = document.getElementById(id);
        element.scrollIntoView({ behavior: 'smooth', block: 'start', inline: 'nearest' });
    }

    ngAfterViewChecked() {
        if (!this.highlighted) {
            this.highlightService.highlightAll();
            this.highlighted = true;
        }
    }

    ngOnInit(): void {
        this.isDarkTheme = this.themeService.isDarkTheme;
    }
}
